
@startuml Graph Loading and Prediction


participant Rasa order 1
participant Channel order 2
participant Agent order 3
participant GraphProcessor order 4
participant GraphLoader order 5
control GraphRunner <<Infrastructure>> order 6
participant GraphNode order 7
entity GraphComponent order 8
database ModelStorage <<Infrastructure>> order 9
database ActionServer <<Infrastructure>> order 11
database TrackerStore <<Infrastructure>> order 12


== Creating the ModelStorage ==
Rasa -> ModelStorage: create(model_directory)
Rasa <-- ModelStorage: model_storage

== Loading the Graph ==
Rasa -> GraphLoader: ~__init__(model_storage, graph_runner_class)

GraphLoader -> ModelStorage: unpack_model
GraphLoader <-- ModelStorage: graph_schema, domain

GraphLoader -> GraphRunner: graph_runner_class.create(graph_schema, model_storage)

GraphRunner -> GraphRunner: instantiate_graph()

group instantiate_graph (for every graph node in schema)

    GraphRunner -> GraphNode: ~__init__(nodename, config, model_storage)
    group if trained component
        note over GraphNode: The resource  will have been specified in the graph schema to point to the corresponding train node in the train schema.
        GraphNode -> GraphComponent: load(config, resource, model_storage)
        GraphComponent -> ModelStorage: with_read_from(resource)
        ModelStorage -> ModelStorage: create_tmp_dir
        ModelStorage -> ModelStorage: copy_from_resource(resource, tmp_dir)
        GraphComponent <-- ModelStorage: tmp_dir
        GraphComponent -> GraphComponent: load_data(tmp_dir)
        GraphComponent -> ModelStorage: exit_context_manager()
        ModelStorage -> ModelStorage: remove_tmp_dir
        GraphComponent <-- ModelStorage
    end
    group else
        GraphNode -> GraphComponent: create(config, resource, model_storage)
    end
    GraphNode <-- GraphComponent: graph_component

    GraphRunner <-- GraphNode: graph_node
end

GraphLoader <-- GraphRunner: graph_runner
Rasa <-- GraphLoader: graph_runner, graph_schema, domain


== Creating the Processor ==

Rasa -> GraphProcessor: ~__init__(graph_runner, graph_schema)
Rasa <-- GraphProcessor: graph_processor

Rasa -> Agent: initialize_processor(graph_processor, domain)
Agent -> TrackerStore: ~__init__(domain)
Agent <-- TrackerStore
Rasa <-- Agent

== Prediction ==

Channel -> Agent: handle_message(message)
Agent -> TrackerStore: get_tracker(message)
Agent <-- TrackerStore: tracker
Agent -> GraphProcessor: predict_until_next_turn(tracker, message)
group loop until action_listen
    GraphProcessor -> GraphRunner: run(targets, inputs)

    == Running the graph ==
    GraphRunner -> GraphRunner: insert_inputs_in_instantiated_graph(inputs)

    GraphRunner -> GraphRunner: execute(instantiated_graph, targets)

        entity GraphNode

        group execute (for graph_node in sorted(graph_nodes))
            GraphRunner -> GraphNode: run(inputs_from_previous_node)

            GraphNode -> GraphComponent: run(inputs)
            GraphNode <-- GraphComponent: output

            GraphRunner <-- GraphNode: output
        end

    GraphProcessor <-- GraphRunner: results
    GraphProcessor -> ActionServer: run_action
    GraphProcessor <-- ActionServer: events
    GraphProcessor -> GraphProcessor: add_to_tracker
end
Agent <-- GraphProcessor: tracker
Agent -> Agent: add_model_id_to_tracker_events(tracker)
Agent -> TrackerStore: save_tracker(tracker)
Rasa <-- Agent: bot_message


@enduml
